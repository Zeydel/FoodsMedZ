//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientSide.RecipeServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RecipeServiceReference.IRecipeService")]
    public interface IRecipeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/getRecipe", ReplyAction="http://tempuri.org/IRecipeService/getRecipeResponse")]
        FoodService.Recipe getRecipe(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/getRecipe", ReplyAction="http://tempuri.org/IRecipeService/getRecipeResponse")]
        System.Threading.Tasks.Task<FoodService.Recipe> getRecipeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/addRecipe", ReplyAction="http://tempuri.org/IRecipeService/addRecipeResponse")]
        void addRecipe(int recipe_id, string recipe_name, int recipe_minutes, bool recipe_veg, bool recipe_vegan, bool cheap, bool sustainable, bool glutenfree, bool dairyfree, string image, string instruction, string imageTyp, FoodService.Ingredients[] ingredientList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/addRecipe", ReplyAction="http://tempuri.org/IRecipeService/addRecipeResponse")]
        System.Threading.Tasks.Task addRecipeAsync(int recipe_id, string recipe_name, int recipe_minutes, bool recipe_veg, bool recipe_vegan, bool cheap, bool sustainable, bool glutenfree, bool dairyfree, string image, string instruction, string imageTyp, FoodService.Ingredients[] ingredientList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/findRecipesByName", ReplyAction="http://tempuri.org/IRecipeService/findRecipesByNameResponse")]
        string findRecipesByName(string recipe_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/findRecipesByName", ReplyAction="http://tempuri.org/IRecipeService/findRecipesByNameResponse")]
        System.Threading.Tasks.Task<string> findRecipesByNameAsync(string recipe_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/findRecipesById", ReplyAction="http://tempuri.org/IRecipeService/findRecipesByIdResponse")]
        string findRecipesById(int recipe_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/findRecipesById", ReplyAction="http://tempuri.org/IRecipeService/findRecipesByIdResponse")]
        System.Threading.Tasks.Task<string> findRecipesByIdAsync(int recipe_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/getAllRecipes", ReplyAction="http://tempuri.org/IRecipeService/getAllRecipesResponse")]
        string getAllRecipes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/getAllRecipes", ReplyAction="http://tempuri.org/IRecipeService/getAllRecipesResponse")]
        System.Threading.Tasks.Task<string> getAllRecipesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/getRecipesAdvanced", ReplyAction="http://tempuri.org/IRecipeService/getRecipesAdvancedResponse")]
        string getRecipesAdvanced(string searchTerm, bool vegetarian, bool vegan, bool cheap, bool glutenfree, bool dairyfree, int maxminues);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecipeService/getRecipesAdvanced", ReplyAction="http://tempuri.org/IRecipeService/getRecipesAdvancedResponse")]
        System.Threading.Tasks.Task<string> getRecipesAdvancedAsync(string searchTerm, bool vegetarian, bool vegan, bool cheap, bool glutenfree, bool dairyfree, int maxminues);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecipeServiceChannel : ClientSide.RecipeServiceReference.IRecipeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecipeServiceClient : System.ServiceModel.ClientBase<ClientSide.RecipeServiceReference.IRecipeService>, ClientSide.RecipeServiceReference.IRecipeService {
        
        public RecipeServiceClient() {
        }
        
        public RecipeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecipeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecipeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecipeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FoodService.Recipe getRecipe(int id) {
            return base.Channel.getRecipe(id);
        }
        
        public System.Threading.Tasks.Task<FoodService.Recipe> getRecipeAsync(int id) {
            return base.Channel.getRecipeAsync(id);
        }
        
        public void addRecipe(int recipe_id, string recipe_name, int recipe_minutes, bool recipe_veg, bool recipe_vegan, bool cheap, bool sustainable, bool glutenfree, bool dairyfree, string image, string instruction, string imageTyp, FoodService.Ingredients[] ingredientList) {
            base.Channel.addRecipe(recipe_id, recipe_name, recipe_minutes, recipe_veg, recipe_vegan, cheap, sustainable, glutenfree, dairyfree, image, instruction, imageTyp, ingredientList);
        }
        
        public System.Threading.Tasks.Task addRecipeAsync(int recipe_id, string recipe_name, int recipe_minutes, bool recipe_veg, bool recipe_vegan, bool cheap, bool sustainable, bool glutenfree, bool dairyfree, string image, string instruction, string imageTyp, FoodService.Ingredients[] ingredientList) {
            return base.Channel.addRecipeAsync(recipe_id, recipe_name, recipe_minutes, recipe_veg, recipe_vegan, cheap, sustainable, glutenfree, dairyfree, image, instruction, imageTyp, ingredientList);
        }
        
        public string findRecipesByName(string recipe_name) {
            return base.Channel.findRecipesByName(recipe_name);
        }
        
        public System.Threading.Tasks.Task<string> findRecipesByNameAsync(string recipe_name) {
            return base.Channel.findRecipesByNameAsync(recipe_name);
        }
        
        public string findRecipesById(int recipe_id) {
            return base.Channel.findRecipesById(recipe_id);
        }
        
        public System.Threading.Tasks.Task<string> findRecipesByIdAsync(int recipe_id) {
            return base.Channel.findRecipesByIdAsync(recipe_id);
        }
        
        public string getAllRecipes() {
            return base.Channel.getAllRecipes();
        }
        
        public System.Threading.Tasks.Task<string> getAllRecipesAsync() {
            return base.Channel.getAllRecipesAsync();
        }
        
        public string getRecipesAdvanced(string searchTerm, bool vegetarian, bool vegan, bool cheap, bool glutenfree, bool dairyfree, int maxminues) {
            return base.Channel.getRecipesAdvanced(searchTerm, vegetarian, vegan, cheap, glutenfree, dairyfree, maxminues);
        }
        
        public System.Threading.Tasks.Task<string> getRecipesAdvancedAsync(string searchTerm, bool vegetarian, bool vegan, bool cheap, bool glutenfree, bool dairyfree, int maxminues) {
            return base.Channel.getRecipesAdvancedAsync(searchTerm, vegetarian, vegan, cheap, glutenfree, dairyfree, maxminues);
        }
    }
}
